{"version":3,"sources":["global.js","components/layout/Header.style.js","components/NavBar.js","components/layout/Header.js","components/layout/Footer.style.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","HeaderStyle","styled","div","Logo","h1","ul","Ul","open","StyledBurger","LeftBar","Burger","useState","setOpen","onClick","DarkMode","Header","FooterStyle","Copy","p","Footer","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4VAEO,IAAMA,EAAcC,YAAH,K,6fCAjB,IAAMC,EAAcC,IAAOC,IAAV,KASXC,EAAOF,IAAOG,GAAV,K,GAICH,IAAOI,GAAV,K,08BCTf,IAAMC,EAAKL,IAAOI,GAAV,KAQM,qBAAGE,KAAkB,gBAAkB,sBAgB/CC,EAAeP,IAAOC,IAAV,KAqBF,qBAAGK,KAAkB,gBAAkB,eAIvC,qBAAGA,KAAkB,mBAAqB,mBAC5C,qBAAGA,KAAkB,EAAI,KAIvB,qBAAGA,KAAkB,iBAAmB,eAKlDE,EAAU,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAH,OACf,kBAAC,EAAD,CAAIA,KAAMA,GACT,oCACA,oCACA,wCACA,0CAIWG,EAAS,WAAO,IAAD,EACHC,oBAAS,GADN,mBACpBJ,EADoB,KACdK,EADc,KAG3B,OACC,oCACC,kBAACJ,EAAD,CAAcD,KAAMA,EAAMM,QAAS,kBAAMD,GAASL,KACnD,8BACA,8BACA,+BAEC,kBAAC,EAAD,CAASA,KAAMA,MC9EZO,EAAW,kBAAO,iCAEXC,EAAS,kBACrB,kBAACf,EAAD,KACC,kBAAC,EAAD,MACA,kBAACG,EAAD,gBACA,kBAAC,EAAD,Q,mTCVK,IAAMa,EAAcf,IAAOC,IAAV,KAUXe,EAAOhB,IAAOiB,EAAV,KCTJC,EAAS,kBACrB,kBAACH,EAAD,KACC,kBAACC,EAAD,iCCUaG,MAXf,WACE,OACE,kBAAC,IAAMC,SAAP,KACD,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAACvB,EAAD,QCEiBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa6841fb.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\nbody {\n background: #192841;\n color: #fff;\n }\n `\n","import styled from 'styled-components';\n\nexport const HeaderStyle = styled.div`\n display: flex;\n width: 100%;\n padding: 0.5%;\n align-items: center;\n justify-content: space-around;\n font-size: 14pt;\n background: #203354;\n `\nexport const Logo = styled.h1`\n text-shadow: .5px .5px 1px #ddd;\n `\n\nexport const Ul = styled.ul`\n list-style: none;\n display: flex;\n flex-flow: row nowrap;\n\n li {\n  padding: 10px 10px;\n  }\n\n  \n `\n\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\n\nconst Ul = styled.ul`\n list-style: none;\n display: flex;\n flex-flow: row nowrap;\n\n @media (max-width: 768px) {\n\tdisplay: none;\n\tposition: fixed;\n\ttransform: ${({ open }) => open ? 'translateX(0)' : 'translateX(100%)'};\n\ttop: 0;\n\tleft: 0;\n\theight: 100vh;\n\twidth: 300px;\n\tpadding-top: 3.5rem;\n\ttransition: transform 0.3s ease-in-out;\n\tbackground: #000;\n\n\tli {\n\t color: #fff;\n\t }\n }\n\n `;\n\nconst StyledBurger = styled.div`\n display: none;\n width: 2rem;\n height: 2rem;\n\n @media (max-width: 768px) {\n \tdisplay: flex;\n\tjustify-content: space-around;\n\tflex-flow: column nowrap;\n }\n\n div {\n  width: 2rem;\n  height: 0.25rem;\n  border-radius: 10px;\n  background: #fff;\n\n  transform-origin: 1px;\n  transition: all 0.3s linear;\n\n  &:nth-child(1) {\n   transform: ${({ open }) => open ? 'rotate(45deg)' : 'rotate(0)'};\n   }\n\n  &:nth-child(2) {\n   transform: ${({ open }) => open ? 'translateX(100%)' : 'translateX(0)'};\n   opacity: ${({ open }) => open ? 0 : 1};\n   }\n\n  &:nth-child(3) {\n   transform: ${({ open }) => open ? 'rotate(-45deg)' : 'rotate(0)'};\n   }\n }\n `;\n\nconst LeftBar = ({ open }) => (\n\t<Ul open={open}>\n\t <li>Home</li>\n\t <li>Blog</li>\n\t <li>Projects</li>\n\t <li>Contacts</li>\n\t</Ul>\n)\n\nexport const Burger = () => {\n\tconst [open, setOpen] = useState(false)\n\n\treturn (\n\t <>\n\t  <StyledBurger open={open} onClick={() => setOpen(!open)}>\n\t\t<div />\n\t\t<div />\n\t\t<div />\n\t  </StyledBurger>\n\t  <LeftBar open={open}/>\n\t </>\n\t)\n}\n\nexport const NavBar = () => (\n\t<>\n\t <Burger />\n\t</>\n)\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { HeaderStyle, Logo} from './Header.style';\nimport { Burger } from './../NavBar';\n\nconst DarkMode = () => (<p>D</p>)\n\nexport const Header = () => (\n\t<HeaderStyle>\n\t\t<Burger />\n\t\t<Logo>MathLun</Logo>\n\t\t<DarkMode />\n\t</HeaderStyle>\n)\n","import styled from 'styled-components';\n\nexport const FooterStyle = styled.div`\n position: fixed;\n display: flex;\n width: 100%;\n padding: 2%;\n justify-content: center;\n background: #203354;\n bottom: 0;\n `\n\nexport const Copy = styled.p`\n font-family: Arial, sans-serif;\n `\n","import React from 'react';\nimport { FooterStyle, Copy } from './Footer.style';\n\nexport const Footer = () => (\n\t<FooterStyle>\n\t\t<Copy>&copy; Matheus Luna 2020</Copy>\n\t</FooterStyle>\n)\n","import React from 'react';\nimport { GlobalStyle } from './global';\nimport { Header, Footer } from './components/layout/index';\n\nfunction App() {\n  return (\n    <React.Fragment>\n\t  <Header />\n\n\t  <Footer />\n\t  <GlobalStyle />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
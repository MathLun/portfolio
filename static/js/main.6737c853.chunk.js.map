{"version":3,"sources":["global.js","components/Nav/NavBar.js","layout/Header.js","layout/Main.js","layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Ul","styled","ul","open","StyledBurger","div","Nav","nav","Copy","p","LeftBar","to","Burger","useState","setOpen","onClick","Logo","h1","Brand","Header","Contained","props","white","css","AnimateBrand","SubBrand","h3","SlideShow","Title","Description","ListWorks","Card","About","Works","Main","SocialMedia","Footer","icon","faGithubAlt","size","faFacebook","faTwitter","App","Boolean","window","location","hostname","match","httpLink","createHttpLink","url","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6737c853.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Source+Sans+Pro&display=swap');\n\n@import url('https://fonts.googleapis.com/css2?family=Lexend+Zetta&display=swap');\n\nbody {\n margin: 0;\n background: #192841;\n color: #fff;\n\n font-family: 'Lexend Zetta', sans-serif;\n}\n`\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst Ul = styled.ul`\n list-style: none;\n flex-flow: row nowrap;\n display: flex;\n\n li {\n  font-size: 20pt;\n  padding: 16px 0;\n  }\n \n a {\n  color: #fff;\n  text-decoration: none;\n  }\n\n @media (max-width: 768px) {\n \tflex-flow: column nowrap;\n\tposition: fixed;\n\ttransform: ${({ open }) => open ? 'translateX(0)' : 'translateX(100%)'};\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\theight: 100vh;\n\twidth: 250px;\n\tpadding-top: 5rem;\n\ttransition: transform 0.7s ease-in-out;\n\tbackground-image: linear-gradient(#192841, #037d50);\n\t\n\tli {\n\t color: #000;\n\t }\n }\n\n `\n\nconst StyledBurger = styled.div`\n display: none;\n width: 2rem;\n height: 2rem; \n top: 15px;\n z-index: 20;\n\n @media (max-width: 768px) {\n \tdisplay: flex;\n\tjustify-content: space-around;\n\tflex-flow: column nowrap;\n }\n\n div {\n  width: 2rem;\n  height: 0.25rem;\n  border-radius: 10px;\n  background-color: ${({ open }) => open ? '#fff' : '#fff'};\n\n  transform-origin: 1px;\n  transition: all 0.3s linear;\n\n  &:nth-child(1) {\n   transform: ${({ open }) => open ? 'rotate(45deg)' : 'rotate(0)'};\n   }\n\n  &:nth-child(2) {\n   transform: ${({ open }) => open ? 'translateX(100%)' : 'translateX(0)'};\n   opacity: ${({ open }) => open ? 0 : 1};\n   }\n\n  &:nth-child(3) {\n   transform: ${({ open }) => open ? 'rotate(-45deg)' : 'rotate(0)'};\n   }\n }\n `\n\nexport const Nav = styled.nav`\n display: flex;\n height: 55px; \n padding: 5px 23px;\n justify-content: space-between;\n align-items: center;\n border-bottom: 2px solid #fff;\n\n .logo {\n  padding: 15px 0;\n  }\n `\n\nconst Copy = styled.p`\n position: absolute;\n bottom: 100px;\n margin: 0 30px;\n`\n\nconst LeftBar = ({ open }) => {\n\treturn (\n\t<Ul open={open}>\n\t <li>\n\t\t<Link to=\"/\">Home</Link>\n\t </li>\n\t <li>\n\t\t<Link to=\"/blog\">Blog</Link>\n\t </li>\n\t <li>\n\t\t<Link to='/works'>Works</Link>\n\t </li>\n\t <li>\n\t\t<Link to='/contacts'>Contacts</Link>\n\t </li>\n\t <Copy>&copy; Matheus Luna 2020</Copy>\n\t</Ul>\n\t)\n}\n\nexport const Burger = () => {\n\tconst [open, setOpen] = useState(false)\n\n\treturn (\n\t <>\n\t  <StyledBurger open={open} onClick={() => setOpen(!open)}>\n\t\t<div />\n\t\t<div />\n\t\t<div />\n\t  </StyledBurger>\n\t  <LeftBar open={open}/>\n\t </>\n\t)\n}\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Burger, Nav } from '../components/Nav/NavBar';\n\nconst Logo = styled.h1`\n \n `\n\nconst Brand = () => {\n\treturn <Logo>M.</Logo>;\n}\n\nconst Header = () => {\n\treturn (\n\t <Nav>\n\t\t<Brand />\n\t\t<Burger />\n\t </Nav>\n\t)\n}\n\nexport default Header;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Contained = styled.div`\n display: flex;\n width: 100%; \n height: 620px;\n background: linear-gradient(#192841, #037d50);\n \n align-items: center;\n justify-content: center;\n flex-flow: column nowrap;\n\n ${props => props.white && css`\n \tbackground: #fff;\n\tcolor: #000;\n `};\n `\n\nconst AnimateBrand = styled.h1`\n color: #037d50;\n text-shadow: .3px .2px #000;\n font-size: 24pt;\n `\nconst SubBrand = styled.h3`\n color: #fff;\n `\n\nconst SlideShow = () => {\n\treturn (\n\t <Contained>\n\t \t<AnimateBrand>\n\t\t\tMatheus Luna\n\t\t</AnimateBrand>\n\t\t<SubBrand>\n\t\t\tFullstack Developer\n\t\t</SubBrand>\n\t </Contained>\n\t)\n}\n\nconst Title = styled.h1`\n \n`\nconst Description = styled.p`\n \n`\n\nconst ListWorks = styled.div`\n overflow: auto;\n scroll-snap-type: y mandatory;\n display: flex;\n overflow-x: auto;\n white-space: nowrap;\n`\nconst Card = styled.div`\n width: 30vw;\n height: 30vh;\n background: #fff;\n scroll-snap-align: center;\n`\n\nconst About = () => {\n\treturn (\n\t <Contained white>\n\t\t<Title>About me</Title>\n\n\t\t<Description>\n\t\t\tMy name is Matheus Luna, your Fullstack developer.\n\t\t</Description>\n\t </Contained>\n\t)\n}\n\nconst Works = () => {\n\treturn (\n\t <Contained>\n\t\t<Title>Works</Title>\n\t\t<ListWorks>\n\t\t\t<Card />\n\t\t\t<Card />\n\t\t\t<Card />\n\t\t</ListWorks>\n\t </Contained>\n\t)\n}\n\nconst Main = () => {\n\treturn (\n\t <>\n\t\t<SlideShow />\n\t\t<About />\n\t\t<Works />\n\t </>\n\t)\n}\n\nexport default Main;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSurprise } from '@fortawesome/free-solid-svg-icons';\nimport { \n\tfaFacebook,\n\tfaGithubAlt, \n\tfaTwitter\n} from '@fortawesome/free-brands-svg-icons';\n\nconst Contained = styled.div`\n display: flex;\n \n padding: 30px;\n bottom: 0;\n\n align-items: center;\n justify-content: center;\n flex-flow: column nowrap;\n\n`\n\nconst Copy = styled.p`\n \n`\n\nconst SocialMedia = styled.div`\n svg{\n  margin: 0 10px;\n }\n`\nconst Footer = () => {\n\treturn (\n\t <Contained>\n\t\t<SocialMedia>\n\t\t\t<FontAwesomeIcon icon={faGithubAlt} size=\"2x\" />\n\t\t\t<FontAwesomeIcon icon={faFacebook} size=\"2x\"/>\n\t\t\t<FontAwesomeIcon icon={faTwitter} size=\"2x\" />\n\t\t</SocialMedia>\n\t\t<Copy>\n\t\t\t&copy; Matheus Luna 2020\n\t\t</Copy>\n\t </Contained>\n\t)\n}\n\nexport default Footer;\n","import React from 'react';\nimport { \n\tBrowserRouter, \n\tRoute \n} from 'react-router-dom';\n\nimport { GlobalStyle } from './global';\n\nimport Header from './layout/Header';\nimport Main from './layout/Main';\nimport Footer from './layout/Footer';\n\nconst Blog = () => {\n        return (\n                <h1>Blog</h1>\n        )\n}\n\nfunction App() {\n  return (\n    <BrowserRouter>\n\t  \t<Header />\n                <Main />\n\t  \t<Footer />\n\t  \t<GlobalStyle />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Apollo Modules\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n// Create HTTP Link\nconst httpLink = createHttpLink({\n\turl: 'http://localhost:4000'\n})\n\n// Apollo Client Conf.\nconst client = new ApolloClient({\n\tlink: httpLink,\n\tcache: new InMemoryCache()\n})\n\n// Render Static Content\nReactDOM.render(\n  //<React.StrictMode>\n  <ApolloProvider client={ client }>\n    <App />\n  </ApolloProvider>,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\n"],"sourceRoot":""}